{"version":3,"sources":["Service/person.js","Filter.js","Notification.js","PersonForm.js","PhoneBook.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Filter","showFilter","setshowFilter","value","onChange","e","target","styles","success","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","fail","Notification","notification","console","log","className","style","PersonForm","newName","newNumber","addNewName","handleNameChange","handleNumberChange","onSubmit","type","PhoneBook","persons","removeEntry","filterUpperCase","toUpperCase","filter","person","name","includes","map","number","onClick","App","useState","setPersons","setNewName","setNewNumber","setNotification","setSuccess","useEffect","personsService","catch","error","showMessage","message","successNotification","setTimeout","preventDefault","personObject","some","personId","find","item","updatedEntry","Object","assign","window","confirm","n","returnedPerson","concat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f83870c.chunk.js","sourcesContent":["import axios from \"axios\";\n\n//const baseUrl = \"http://localhost:3003/persons\";\nconst baseUrl = 'api/persons';\n\n// get rquest for all of json datas\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\n// post request to add new entry\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data)\n};\n\n// put request to update json db\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n};\n\n// delete request to delete from json data base \nconst remove = id => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then(response => response.data);\n};\n\n\n// exporting all of the functions \nexport default {\n  getAll: getAll,\n  create: create,\n  update: update,\n  remove: remove\n};\n","import React from \"react\";\n\nconst Filter = ({ showFilter, setshowFilter }) => {\n  const filterPersons = e => {\n    setshowFilter(e.target.value);\n  };\n\n  return (\n    <div>\n      filter shown with <input value={showFilter} onChange={filterPersons} />\n    </div>\n  );\n};\n\nexport default Filter;","import React from \"react\";\n\nconst Notification = ({ notification, success }) => {\n  console.log(notification);\n  console.log(success);\n\n  // if there is no notification return null\n  if (notification === null) {\n    return null;\n  }\n\n  // if success renders the paticular (inLine) style \n  if (success)\n    return (\n      <div className=\"success\" style={styles.success}>\n        {notification}\n      </div>\n    );\n  else\n    return (\n      <div className=\"success\" style={styles.fail}>\n        {notification}\n      </div>\n    );\n};\n\nvar styles = {\n  success: {\n    color: \"green\",\n    background: \"white\",\n    fontSize: 20,\n    borderStyle: \"solid\",\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  },\n  fail: {\n    color: \"red\",\n    background: \"white\",\n    fontSize: 20,\n    borderStyle: \"solid\",\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  }\n};\n\nexport default Notification;","import React from \"react\";\n\nconst PersonForm = ({\n  newName,\n  newNumber,\n  addNewName,\n  handleNameChange,\n  handleNumberChange\n}) => {\n  return (\n    \n    <form onSubmit={addNewName}>\n      <div>\n      {/* calls the function tracking values in the name input */}\n        name: <input value={newName} onChange={handleNameChange} />\n      </div>\n      <div>\n       {/* calls the function tracking values in the numer input */}\n        number: <input value={newNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n       {/* calls the create request to add name and number */}\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from \"react\";\n\nconst PhoneBook = ({ persons, showFilter, removeEntry }) => {\n  // capitalize whats in the filter inputs  \n  let filterUpperCase = showFilter.toUpperCase();\n  \n  // filter though persons based on filter inputs value\n  let newPersonArray = persons.filter(person => {\n    let personInUpperCase = person.name.toUpperCase();\n    return personInUpperCase.includes(filterUpperCase);\n  });\n\n  // loop through newPersonArray and creat an li for each element\n  return newPersonArray.map(person => (\n    <li key={person.name}>\n      {person.name} : {person.number}\n      <button onClick={() => removeEntry(person)}>Delete</button>\n    </li>\n  ));\n};\n\nexport default PhoneBook;","import React, { useState, useEffect } from \"react\";\n// importing a modual personsService\nimport personsService from \"./Service/person\";\nimport Filter from \"./Filter\";\nimport Notification from \"./Notification\";\nimport PersonForm from \"./PersonForm\";\nimport PhoneBook from \"./PhoneBook\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [showFilter, setshowFilter] = useState(\"\");\n  const [notification, setNotification] = useState(null);\n  const [success, setSuccess] = useState(null);\n\n  // show data on the screen\n  useEffect(() => {\n    personsService\n      .getAll()\n      .then(response => {\n        setPersons(response);\n      })\n      .catch(error => showMessage(\"Could not retrieve data\", false));\n  }, []);\n\n  const addNewName = e => {\n    e.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n\n    //console.log('persons.some(e => e.name === newName)',persons.some(e => e.name === newName))\n\n    // if name is already in phone book return true and alert user\n    if (persons.some(e => e.name === newName)) {\n\n      // first name equal to that name \n      let personId = persons.find(item => item.name === newName);\n\n      // assigning whats in person obj to person id to update the entry\n      let updatedEntry = Object.assign(personId, personObject);\n\n      // alert the user  to update name  and / or  number\n      if (\n        window.confirm(\n          `Do you want to update ${newName} with number ${newNumber}?`\n        )\n      ) {\n        // based on the condition it will make put request to update\n        personsService\n          .update(personId.id, personObject)\n          .then(() => {\n            setPersons(\n              // map through persons check if name is equal to new name \n              //and either return updatedEntry or item\n              persons.map(item => (item.name === newName ? updatedEntry : item))\n            );\n            // reset inputs \n            setNewName(\"\");\n            setNewNumber(\"\");\n            // alert user of the changes \n            showMessage(`User ${newName} phone number updated`);\n          })\n          .catch(error => {\n            showMessage(\n              `Update failed. User ${newName} has already been removed from the phone book.`,\n              false\n            );\n            setPersons(persons.filter(n => n.name !== newName));\n          });\n      }\n    } else {\n      // if number is already in phone book return true and alert user\n      if (persons.some(e => e.number === newNumber)) {\n        showMessage(`# ${newNumber} is already in the phone book.`, false);\n      } else {\n        // check if inputs are empty and set show message\n        if (newName === \"\" || newNumber === \"\") {\n          showMessage(`The name and number must not be empty`, false);\n        } else {\n          // add personObject to the data base \n          personsService\n            .create(personObject)\n            .then(returnedPerson => {\n              setPersons(persons.concat(returnedPerson));\n              // reset inputs \n              setNewName(\"\");\n              setNewNumber(\"\");\n              // alert user\n              showMessage(`User ${newName} has been added to the phone book`);\n            })\n            .catch(error => {\n              console.log(error.response.data.error)\n              return showMessage(\n                `Failed to add number. More about error: ${\n                  error.response.data.error\n                }`,\n                false\n              );\n            });\n            // make a get requests of updated data\n          personsService\n            .getAll()\n            .then(response => {\n              setPersons(response);\n            })\n            .catch(error => showMessage(\"Could not retrieve data\", false));\n        }\n      }\n    }\n  };\n\n  const removeEntry = person => {\n    // if user clicks yes to remove\n    if (window.confirm(`Remove ${person.name}?`)) {\n      // call delete request with id that needs to be deleted\n      personsService\n        .remove(person.id)\n        .then(() => {\n          // setPerson to filtered array of every preson but the deleted person\n          setPersons(persons.filter(item => item.id !== person.id));\n          showMessage(`${person.name} has been removed from the phone book`);\n        })\n        .catch(error => {\n          showMessage(\n            `Removal failed. User ${\n              person.name\n            } has already been removed from the phone book.`,\n            false\n          );\n            // make a get requests of updated data\n          personsService\n            .getAll()\n            .then(response => {\n              setPersons(response);\n            })\n            .catch(error => showMessage(\"Could not retrieve data\", false));\n        });\n    }\n  };\n\n  // tracking values in the name input\n  const handleNameChange = e => {\n    // console.log(e.target.value);\n    setNewName(e.target.value);\n  };\n\n  // tracking values in the number input\n  const handleNumberChange = e => {\n    setNewNumber(e.target.value);\n  };\n\n  const showMessage = (message, successNotification = true) => {\n    // sets notication based on the true or false given by the condiyion it was called in\n    setNotification(message);\n    // boolean value if the rquest was successful or not\n    setSuccess(successNotification);\n\n    // the notificatio will stay on browser for 3 sec\n    setTimeout(() => {\n      setNotification(null);\n      setSuccess(null);\n    }, 3000);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} success={success} />\n      <Filter showFilter={showFilter} setshowFilter={setshowFilter} />\n      <h2>add a new</h2>\n      <PersonForm\n        addNewName={addNewName}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <ul>\n        <PhoneBook\n          persons={persons}\n          showFilter={showFilter}\n          removeEntry={removeEntry}\n        />\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}